#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packagerMain = exports.runAsarArchive = exports.packageDirToResourcesDir = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var packageDirToResourcesDir = exports.packageDirToResourcesDir = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(packageDir) {
    var appDir;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _promise.pfs.readdir(packageDir);

          case 2:
            _context.t0 = function (x) {
              return x.match(/\.app$/i);
            };

            appDir = _context.sent.find(_context.t0);

            if (!appDir) {
              _context.next = 8;
              break;
            }

            return _context.abrupt('return', _path2.default.join(packageDir, appDir, 'Contents', 'Resources', 'app'));

          case 8:
            return _context.abrupt('return', _path2.default.join(packageDir, 'resources', 'app'));

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function packageDirToResourcesDir(_x) {
    return _ref.apply(this, arguments);
  };
}();

var copySmallFile = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(from, to) {
    var buf;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            d('Copying ' + from + ' => ' + to);

            _context2.next = 3;
            return _promise.pfs.readFile(from);

          case 3:
            buf = _context2.sent;
            _context2.next = 6;
            return _promise.pfs.writeFile(to, buf);

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function copySmallFile(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

var compileAndShim = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(packageDir) {
    var appDir, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, fullPath, stat, packageJson, index;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return packageDirToResourcesDir(packageDir);

          case 2:
            appDir = _context3.sent;


            d('Looking in ' + appDir);
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context3.prev = 7;
            _context3.next = 10;
            return _promise.pfs.readdir(appDir);

          case 10:
            _context3.t0 = _context3.sent;
            _iterator = (0, _getIterator3.default)(_context3.t0);

          case 12:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context3.next = 28;
              break;
            }

            entry = _step.value;

            if (!entry.match(/^(node_modules|bower_components)$/)) {
              _context3.next = 16;
              break;
            }

            return _context3.abrupt('continue', 25);

          case 16:
            fullPath = _path2.default.join(appDir, entry);
            _context3.next = 19;
            return _promise.pfs.stat(fullPath);

          case 19:
            stat = _context3.sent;

            if (stat.isDirectory()) {
              _context3.next = 22;
              break;
            }

            return _context3.abrupt('continue', 25);

          case 22:

            d('Executing electron-compile: ' + appDir + ' => ' + entry);
            _context3.next = 25;
            return (0, _cli.main)(appDir, [fullPath]);

          case 25:
            _iteratorNormalCompletion = true;
            _context3.next = 12;
            break;

          case 28:
            _context3.next = 34;
            break;

          case 30:
            _context3.prev = 30;
            _context3.t1 = _context3['catch'](7);
            _didIteratorError = true;
            _iteratorError = _context3.t1;

          case 34:
            _context3.prev = 34;
            _context3.prev = 35;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 37:
            _context3.prev = 37;

            if (!_didIteratorError) {
              _context3.next = 40;
              break;
            }

            throw _iteratorError;

          case 40:
            return _context3.finish(37);

          case 41:
            return _context3.finish(34);

          case 42:

            d('Copying in es6-shim');
            _context3.t2 = JSON;
            _context3.next = 46;
            return _promise.pfs.readFile(_path2.default.join(appDir, 'package.json'), 'utf8');

          case 46:
            _context3.t3 = _context3.sent;
            packageJson = _context3.t2.parse.call(_context3.t2, _context3.t3);
            index = packageJson.main || 'index.js';

            packageJson.originalMain = index;
            packageJson.main = 'es6-shim.js';

            _context3.next = 53;
            return copySmallFile(_path2.default.join(__dirname, 'es6-shim.js'), _path2.default.join(appDir, 'es6-shim.js'));

          case 53:
            _context3.next = 55;
            return _promise.pfs.writeFile(_path2.default.join(appDir, 'package.json'), (0, _stringify2.default)(packageJson, null, 2));

          case 55:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[7, 30, 34, 42], [35,, 37, 41]]);
  }));

  return function compileAndShim(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var runAsarArchive = exports.runAsarArchive = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(packageDir, asarUnpackDir) {
    var appDir, asarArgs, _findExecutableOrGues, cmd, args;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return packageDirToResourcesDir(packageDir);

          case 2:
            appDir = _context4.sent;
            asarArgs = ['pack', 'app', 'app.asar'];

            if (asarUnpackDir) {
              asarArgs.push('--unpack-dir', asarUnpackDir);
            }

            _findExecutableOrGues = findExecutableOrGuess('asar', asarArgs);
            cmd = _findExecutableOrGues.cmd;
            args = _findExecutableOrGues.args;


            d('Running ' + cmd + ' ' + (0, _stringify2.default)(args));
            _context4.next = 11;
            return (0, _spawnRx.spawnPromise)(cmd, args, { cwd: _path2.default.join(appDir, '..') });

          case 11:
            _rimraf2.default.sync(_path2.default.join(appDir));

          case 12:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function runAsarArchive(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

var packagerMain = exports.packagerMain = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(argv) {
    var _splitOutAsarArgument, packagerArgs, asarArgs, _findExecutableOrGues2, cmd, args, packagerOutput, packageDirs, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, packageDir, asarUnpackDir;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            d('argv: ' + (0, _stringify2.default)(argv));
            argv = argv.splice(2);

            _splitOutAsarArgument = splitOutAsarArguments(argv);
            packagerArgs = _splitOutAsarArgument.packagerArgs;
            asarArgs = _splitOutAsarArgument.asarArgs;
            _findExecutableOrGues2 = findExecutableOrGuess(electronPackager, packagerArgs);
            cmd = _findExecutableOrGues2.cmd;
            args = _findExecutableOrGues2.args;


            d('Spawning electron-packager: ' + (0, _stringify2.default)(args));
            _context5.next = 11;
            return (0, _spawnRx.spawnPromise)(cmd, args);

          case 11:
            packagerOutput = _context5.sent;
            packageDirs = parsePackagerOutput(packagerOutput);


            d('Starting compilation for ' + (0, _stringify2.default)(packageDirs));
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context5.prev = 17;
            _iterator2 = (0, _getIterator3.default)(packageDirs);

          case 19:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context5.next = 33;
              break;
            }

            packageDir = _step2.value;
            _context5.next = 23;
            return compileAndShim(packageDir);

          case 23:
            if (asarArgs) {
              _context5.next = 25;
              break;
            }

            return _context5.abrupt('continue', 30);

          case 25:

            d('Starting ASAR packaging');
            asarUnpackDir = null;

            if (asarArgs.length === 2) {
              asarUnpackDir = asarArgs[1];
            }

            _context5.next = 30;
            return runAsarArchive(packageDir, asarUnpackDir);

          case 30:
            _iteratorNormalCompletion2 = true;
            _context5.next = 19;
            break;

          case 33:
            _context5.next = 39;
            break;

          case 35:
            _context5.prev = 35;
            _context5.t0 = _context5['catch'](17);
            _didIteratorError2 = true;
            _iteratorError2 = _context5.t0;

          case 39:
            _context5.prev = 39;
            _context5.prev = 40;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 42:
            _context5.prev = 42;

            if (!_didIteratorError2) {
              _context5.next = 45;
              break;
            }

            throw _iteratorError2;

          case 45:
            return _context5.finish(42);

          case 46:
            return _context5.finish(39);

          case 47:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[17, 35, 39, 47], [40,, 42, 46]]);
  }));

  return function packagerMain(_x7) {
    return _ref5.apply(this, arguments);
  };
}();

exports.splitOutAsarArguments = splitOutAsarArguments;
exports.parsePackagerOutput = parsePackagerOutput;
exports.findExecutableOrGuess = findExecutableOrGuess;

require('./babel-maybefill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _promise = require('./promise');

var _cli = require('./cli');

var _spawnRx = require('spawn-rx');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var d = require('debug-electron')('electron-compile:packager');
var electronPackager = 'electron-packager';

function splitOutAsarArguments(argv) {
  if (argv.find(function (x) {
    return x.match(/^--asar-unpack$/);
  })) {
    throw new Error("electron-compile doesn't support --asar-unpack at the moment, use asar-unpack-dir");
  }

  // Strip --asar altogether
  var ret = argv.filter(function (x) {
    return !x.match(/^--asar/);
  });

  if (ret.length === argv.length) {
    return { packagerArgs: ret, asarArgs: null };
  }

  var indexOfUnpack = ret.findIndex(function (x) {
    return x.match(/^--asar-unpack-dir$/);
  });
  if (indexOfUnpack < 0) {
    return { packagerArgs: ret, asarArgs: [] };
  }

  var unpackArgs = ret.slice(indexOfUnpack, indexOfUnpack + 1);
  var notUnpackArgs = ret.slice(0, indexOfUnpack).concat(ret.slice(indexOfUnpack + 2));

  return { packagerArgs: notUnpackArgs, asarArgs: unpackArgs };
}

function parsePackagerOutput(output) {
  // NB: Yes, this is fragile as fuck. :-/
  console.log(output);
  var lines = output.split('\n');

  var idx = lines.findIndex(function (x) {
    return x.match(/Wrote new app/i);
  });
  if (idx < 1) throw new Error('Packager output is invalid: ' + output);
  lines = lines.splice(idx);

  // Multi-platform case
  if (lines[0].match(/Wrote new apps/)) {
    return lines.splice(1).filter(function (x) {
      return x.length > 1;
    });
  } else {
    return [lines[0].replace(/^.*new app to /, '')];
  }
}

function findExecutableOrGuess(cmdToFind, argsToUse) {
  var _findActualExecutable = (0, _spawnRx.findActualExecutable)(cmdToFind, argsToUse);

  var cmd = _findActualExecutable.cmd;
  var args = _findActualExecutable.args;

  if (cmd === electronPackager) {
    d('Can\'t find ' + cmdToFind + ', falling back to where it should be as a guess!');
    cmd = (0, _spawnRx.findActualExecutable)(_path2.default.resolve(__dirname, '..', '..', '.bin', cmdToFind)).cmd;
  }

  return { cmd: cmd, args: args };
}

if (process.mainModule === module) {
  packagerMain(process.argv).then(function () {
    return process.exit(0);
  }).catch(function (e) {
    console.error(e.message || e);
    d(e.stack);

    process.exit(-1);
  });
}
//# sourceMappingURL=data:application/json;base64,